import{D as w,E as f,h as m}from"./index-CL5__TWX.js";const p=w("assets",()=>{const d=f(),i=m([]);return{assets:i,fetchAll:async()=>{const t=(await d.getStore("assets","readonly")).getAll();return new Promise(async(o,r)=>{t.onsuccess=async()=>{const e=t.result??[];i.value=e,o(i.value)},t.onerror=()=>r(t.error)})},getById:async s=>{const t=await d.getStore("assets","readonly");return new Promise((o,r)=>{const e=t.get(s);e.onsuccess=()=>o(e.result??null),e.onerror=()=>r(e.error)})},add:async s=>{try{const t=await d.getStore("assets","readwrite");return await new Promise((o,r)=>{s?.meta?.balance&&(s.meta.balance=parseInt(s.meta.balance.toString()));const e=t.add(s);e.onsuccess=()=>o(),e.onerror=()=>r(e.error)}),i.value.push(s),{success:!0}}catch(t){return console.error("Add asset failed:",t),{success:!1,error:t}}},update:async(s,t)=>{try{const o=await d.getStore("assets","readwrite"),r=await new Promise((a,c)=>{const n=o.get(s);n.onsuccess=()=>a(n.result),n.onerror=()=>c(n.error)});if(!r)return{success:!1,error:new Error("Asset not found")};const e={...r,...t};await new Promise((a,c)=>{const n=o.put(e);n.onsuccess=()=>a(),n.onerror=()=>c(n.error)});const u=i.value.findIndex(a=>a.id===s);return u!==-1&&(i.value[u]=e),{success:!0}}catch(o){return console.error("Update asset failed:",o),{success:!1,error:o}}},updateItem:async(s,t,o)=>{try{const r=await d.getStore("assets","readwrite"),e=await new Promise((c,n)=>{const l=r.get(s);l.onsuccess=()=>c(l.result),l.onerror=()=>n(l.error)});if(!e||!e.items)throw new Error(`Asset ${s} has no items`);const u=e.items.findIndex(c=>c.id===t);if(u===-1)throw new Error(`Item ${t} not found in asset ${s}`);e.items[u]={...e.items[u],...o},await new Promise((c,n)=>{const l=r.put(e);l.onsuccess=()=>c(),l.onerror=()=>n(l.error)});const a=i.value.findIndex(c=>c.id===s);return a!==-1&&(i.value[a]=e),{success:!0,data:e.items[u]}}catch(r){return console.error("Update asset item failed:",r),{success:!1,error:r}}},remove:async s=>{try{const t=await d.getStore("assets","readwrite");return await new Promise((o,r)=>{const e=t.delete(s);e.onsuccess=()=>o(),e.onerror=()=>r(e.error)}),i.value=i.value.filter(o=>o.id!==s),{success:!0}}catch(t){return console.error("Remove asset failed:",t),{success:!1,error:t}}},removeItem:async(s,t)=>{try{const o=await d.getStore("assets","readwrite"),r=await new Promise((a,c)=>{const n=o.get(s);n.onsuccess=()=>a(n.result),n.onerror=()=>c(n.error)});if(!r||!r.items)throw new Error(`Asset ${s} has no items`);const e=r.items.length;if(r.items=r.items.filter(a=>a.id!==t),r.items.length===e)throw new Error(`Item ${t} not found in asset ${s}`);await new Promise((a,c)=>{const n=o.put(r);n.onsuccess=()=>a(),n.onerror=()=>c(n.error)});const u=i.value.findIndex(a=>a.id===s);return u!==-1&&(i.value[u]=r),{success:!0}}catch(o){return console.error("Remove asset item failed:",o),{success:!1,error:o}}}}});export{p as u};
